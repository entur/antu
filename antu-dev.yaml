---
# Source: antu/templates/configmap.yaml
apiVersion: v1
data:
  application.properties: |+

    # Spring
    spring.main.sources=no.entur.antu
    spring.profiles.active=gcs-blobstore
    server.port=8080
    spring.quartz.auto-startup=false

    # Camel
    camel.springboot.name=antu
    camel.dataformat.jackson.module-refs=jacksonJavaTimeModule
    camel.dataformat.jackson.include=NON_NULL
    camel.cluster.kubernetes.enabled=true
    camel.cluster.kubernetes.cluster-labels[app]=antu
    camel.cluster.kubernetes.config-map-name=antu-leaders
    camel.servlet.mapping.context-path=/services/*
    camel.springboot.streamCachingEnabled=false
    camel.springboot.streamCachingSpoolEnabled=true
    # the Camel shutdown timeout must be shorter than the Kubernetes terminationGracePeriod
    antu.shutdown.timeout=75
    antu.camel.redelivery.max=0

    # Organisation register
    antu.organisation.registry.url=https://api.dev.entur.io/organisations/v1/register/organisations
    antu.organisation.refresh.interval=trigger.repeatInterval=1800000&trigger.repeatCount=-1&stateful=true

    # Stop place register
    antu.stop.registry.id.url=http://tiamat.dev.entur.internal/services/stop_places
    # Refresh stop place cache at 01:00 and 14:00 every day
    antu.stop.refresh.interval=?cron=0+0+01,14+?+*+*
    stopplace.registry.url=https://api.dev.entur.io/stop-places/v1/read


    # Validators
    antu.netex.validation.schema.skip=false

    # Kubernetes
    antu.kubernetes.namespace=antu
    antu.kubernetes.maxpods=10

    # PubSub
    antu.pubsub.project.id=ent-antu-dev
    spring.cloud.gcp.project-id=${antu.pubsub.project.id}

    camel.component.google-pubsub.synchronous-pull-retryable-codes=DEADLINE_EXCEEDED

    #OAuth2 Resource Server
    spring.security.oauth2.resourceserver.jwt.issuer-uri=https://ror-entur-dev.eu.auth0.com/
    antu.oauth2.resourceserver.auth0.ror.jwt.audience=https://ror.api.dev.entur.io
    antu.oauth2.resourceserver.auth0.ror.claim.namespace=https://ror.entur.io/

    #Oauth2 Client
    spring.security.oauth2.client.provider.orgregister.token-uri=https://partner.dev.entur.org/oauth/token
    spring.security.oauth2.client.registration.orgregister.client-id=373j34zZk6PHDf1Ap2LPbOBiL1f5LGte
    spring.security.oauth2.client.registration.orgregister.authorization-grant-type=client_credentials
    orgregister.oauth2.client.audience=https://api.dev.entur.io

    # Blobstore
    blobstore.gcs.project.id=en-antu-dev
    blobstore.gcs.marduk.container.name=marduk-dev
    blobstore.gcs.antu.exchange.container.name=ror-antu-exchange-gcp2-dev
    blobstore.gcs.antu.container.name=ror-antu-gcp2-dev
    antu.netex.stop.current.filename=tiamat/CurrentAndFuture_latest.zip

    # Redis
    spring.data.redis.host=${REDIS_HOST}
    spring.data.redis.port=${REDIS_PORT}
    antu.redis.server.trust.store.file=/deployments/truststore/redis-server-ca.jks

    # Actuator
    management.endpoints.enabled-by-default=false
    management.endpoint.health.enabled=true
    management.health.defaults.enabled=false
    management.endpoint.health.probes.enabled=true
    management.endpoint.health.group.readiness.include=readinessState
    management.endpoint.prometheus.enabled=true
    management.endpoints.web.exposure.include=health,prometheus
    management.endpoints.jmx.exposure.exclude=*


    # Logging
    logging.config=classpath:logback.xml
    logging.level.no.entur=INFO
    logging.level.no.entur.antu=INFO
    logging.level.org.apache=INFO
    logging.level.org.apache.camel.component.http.HttpComponent=WARN

kind: ConfigMap
metadata:
  name: antu-config
  namespace: default
  labels:    
    app: antu
    chart: antu-0.1.0
    release: release-name
    team: ror
    slack: talk-ror
    type: backend
    environment: dev
    customLogRetention: enabled
    namespace: default
---
# Source: antu/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: antu-service-account
  namespace: default
  labels:    
    app: antu
    chart: antu-0.1.0
    release: release-name
    team: ror
    slack: talk-ror
    type: backend
    environment: dev
    customLogRetention: enabled
    namespace: default
rules:
  - apiGroups: [""]
    resources: ["services", "pods", "endpoints"]
    verbs: ["get", "watch", "list"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "watch", "list", "create"]
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["antu-leaders"]
    verbs: ["get", "watch", "list", "update", "patch", "delete"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["create"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    resourceNames: ["antu-leaders-lockonantureportaggregationqueue", "antu-leaders-lockonanturefreshstopcacheperiodically", "antu-leaders-lockonanturefreshstopcacheatstartup", "antu-leaders-lockonantucommonfilesaggregationqueue", "antu-leaders-lockonanturefreshorganisationcache"]
    verbs: ["get", "update", "list"]
  - apiGroups: ["apps"]
    resources: [ "deployments" ]
    verbs: [ "get", "list", "watch", "update", "patch" ]
---
# Source: antu/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: antu-service-account
  namespace: default
  labels:    
    app: antu
    chart: antu-0.1.0
    release: release-name
    team: ror
    slack: talk-ror
    type: backend
    environment: dev
    customLogRetention: enabled
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: antu-service-account
subjects:
  - kind: ServiceAccount
    name: application
    namespace: default
---
# Source: antu/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:    
    app: antu
    chart: antu-0.1.0
    release: release-name
    team: ror
    slack: talk-ror
    type: backend
    environment: dev
    customLogRetention: enabled
    namespace: default
  name: antu
  namespace: default
spec:
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort:  8080
  selector:
    app: antu
  sessionAffinity: None
  type: ClusterIP
---
# Source: antu/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: antu
  namespace: default
  labels:    
    app: antu
    chart: antu-0.1.0
    release: release-name
    team: ror
    slack: talk-ror
    type: backend
    environment: dev
    customLogRetention: enabled
    namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: antu
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:        
        app: antu
        chart: antu-0.1.0
        release: release-name
        team: ror
        slack: talk-ror
        type: backend
        environment: dev
        customLogRetention: enabled
        namespace: default
    spec:
      serviceAccountName: application
      containers:
        - name: antu
          image: <+artifacts.primary.image>
          env:
            - name: JDK_JAVA_OPTIONS
              value: -server -Xmx3000m -Xss512k -XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90
                -XX:MinHeapFreeRatio=20 -XX:MaxHeapFreeRatio=40 -XX:ActiveProcessorCount=1
                --add-opens=java.base/java.nio=ALL-UNNAMED
                --add-opens=java.base/sun.nio.ch=ALL-UNNAMED
                -Dspring.config.location=/etc/application-config/application.properties
                -Dfile.encoding=UTF-8 -Dcom.sun.management.jmxremote.port=9999  -Dcom.sun.management.jmxremote.rmi.port=9998 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1
            - name: TZ
              value: Europe/Oslo
            - name: ANTU_REDIS_SERVER_TRUST_STORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: redis-server-trust-store-password
                  name: ror-antu-secret
            - name: ANTU_REDIS_AUTHENTICATION_STRING
              valueFrom:
                secretKeyRef:
                  key: redis-authentication-string
                  name: ror-antu-secret
          envFrom:
            - configMapRef:
                name: antu-redis-configmap
            - secretRef:
                name: antu-auth-secret
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 140
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
            timeoutSeconds: 10
          resources:
            limits:
              cpu: 2
              memory: 4000Mi
            requests:
              cpu: 1
              memory: 4000Mi
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            capabilities:
              drop: [ "ALL" ]
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /etc/antu-redis-config
              name: antu-redis-config
              readOnly: true
            - mountPath: /etc/application-config
              name: application-config
              readOnly: true
            - mountPath: "/deployments/truststore"
              name: truststore
      initContainers:
        - name: antu-init-trust-store
          image: <+artifacts.primary.image>
          imagePullPolicy: "Always"
          env:
            - name: ANTU_REDIS_SERVER_TRUST_STORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: redis-server-trust-store-password
                  name: ror-antu-secret
          command: [ "keytool" ]
          args: [ "-importcert", "-v", "-noprompt", "-file", "/etc/antu-redis-config/redis-server-ca.pem", "-keystore", "/deployments/truststore/redis-server-ca.jks", "-storepass", "$(ANTU_REDIS_SERVER_TRUST_STORE_PASSWORD)" ]
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            capabilities:
              drop: [ "ALL" ]
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /etc/antu-redis-config
              name: antu-redis-config
              readOnly: true
            - mountPath: "/deployments/truststore"
              name: truststore
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      terminationGracePeriodSeconds: 80
      volumes:
        - name: application-config
          configMap:
            defaultMode: 420
            name: antu-config
        - name: antu-redis-config
          configMap:
            defaultMode: 420
            name: antu-redis-configmap
        - name: truststore
          emptyDir: { }
---
# Source: antu/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: antu
  namespace: default
  labels:    
    app: antu
    chart: antu-0.1.0
    release: release-name
    team: ror
    slack: talk-ror
    type: backend
    environment: dev
    customLogRetention: enabled
    namespace: default
spec:
  maxReplicas:  10
  minReplicas: 2
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: antu
  metrics:
    - type: External
      external:
        metric:
          name: pubsub.googleapis.com|subscription|num_undelivered_messages
          selector:
            matchLabels:
              resource.labels.project_id: ent-antu-dev
              resource.labels.subscription_id: AntuJobQueue
        target:
          type: AverageValue
          averageValue: "0.1"
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 50
  behavior:
    scaleUp:
      policies:
        - type: Pods
          value: 10
          periodSeconds: 15
      stabilizationWindowSeconds: 0
    scaleDown:
      policies:
        - type: Pods
          value: 10
          periodSeconds: 15
      stabilizationWindowSeconds : 300
---
# Source: antu/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    traffic-type: api    
    app: antu
    chart: antu-0.1.0
    release: release-name
    team: ror
    slack: talk-ror
    type: backend
    environment: dev
    customLogRetention: enabled
    namespace: default
  annotations:
    kubernetes.io/ingress.class: traefik
  name: timetable-validation-v1-validation
  namespace: default
spec:
  rules:
    - host: timetable-validation-v1-validation-gcp2.dev.entur.io
      http:
        paths:
          - pathType: ImplementationSpecific
            backend:
              service:
                name: antu
                port:
                  number: 8080
---
# Source: antu/templates/external-secret.yaml
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: antu-auth-secret
  labels: 
  annotations:
    timestamp: 2024-02-15T14:28:41
spec:
  refreshInterval: 1h
  secretStoreRef:
    kind: SecretStore
    name: default
  target:
    name: antu-auth-secret
    creationPolicy: Owner
  data:
  - secretKey: SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_ORGREGISTER_CLIENT_SECRET
    remoteRef:
      key: SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_ORGREGISTER_CLIENT_SECRET
